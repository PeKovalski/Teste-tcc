// ========================================================================================
// OUTONO DOURADO - SISTEMA COMPLETO COM SUPABASE INTEGRADO
// Todos os m√≥dulos integrados em um √∫nico arquivo
// ========================================================================================

// ========================
// 1. IMPORTA√á√ÉO E CONFIGURA√á√ÉO DO SUPABASE
// ========================
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// Credenciais do Supabase
const SUPABASE_URL = 'https://khzrncdvwawmlmwfhoil.supabase.co'
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoenJuY2R2d2F3bWxtd2Zob2lsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0OTg5ODQsImV4cCI6MjA3NTA3NDk4NH0.aA-ecvCZgllSRD6ANnZN6FetHqPixTXlMgmxow6a2BU'

// Criar cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

// Flag para usar Supabase
const USE_SUPABASE = true

console.log('üçÇ Outono Dourado - Sistema carregando com Supabase integrado...')

// ========================
// 2. FUN√á√ïES DE AUTENTICA√á√ÉO SUPABASE
// ========================

async function registerUserSupabase(email, password, nome, telefone = '', endereco = '') {
    try {
        console.log('üìù Registrando novo usu√°rio:', email)
        
        const { data: authData, error: authError } = await supabase.auth.signUp({
            email: email,
            password: password,
            options: {
                data: {
                    nome: nome,
                    telefone: telefone,
                    endereco: endereco
                }
            }
        })
        
        if (authError) throw authError
        
        if (authData.user) {
            const { error: profileError } = await supabase
                .from('usuarios')
                .insert([{
                    id: authData.user.id,
                    email: email,
                    nome: nome,
                    telefone: telefone || '',
                    endereco: endereco || '',
                    is_admin: false,
                    created_at: new Date().toISOString()
                }])
            
            if (profileError) console.error('‚ö†Ô∏è Erro ao criar perfil:', profileError.message)
        }
        
        console.log('‚úÖ Usu√°rio registrado com sucesso!')
        return { success: true, user: authData.user }
        
    } catch (error) {
        console.error('‚ùå Erro no registro:', error.message)
        return { success: false, error: error.message }
    }
}

async function loginUserSupabase(email, password) {
    try {
        console.log('üîê Fazendo login:', email)
        
        const { data, error } = await supabase.auth.signInWithPassword({
            email: email,
            password: password
        })
        
        if (error) throw error
        
        const { data: userData, error: userError } = await supabase
            .from('usuarios')
            .select('*')
            .eq('id', data.user.id)
            .single()
        
        if (userError) console.error('‚ö†Ô∏è Erro ao buscar dados do usu√°rio:', userError.message)
        
        console.log('‚úÖ Login realizado com sucesso!')
        return { success: true, user: data.user, profile: userData }
        
    } catch (error) {
        console.error('‚ùå Erro no login:', error.message)
        return { success: false, error: error.message }
    }
}

async function logoutUserSupabase() {
    try {
        console.log('üö™ Fazendo logout...')
        const { error } = await supabase.auth.signOut()
        if (error) throw error
        console.log('‚úÖ Logout realizado com sucesso!')
        return { success: true }
    } catch (error) {
        console.error('‚ùå Erro no logout:', error.message)
        return { success: false, error: error.message }
    }
}

async function getCurrentUserSupabase() {
    try {
        const { data: { user }, error } = await supabase.auth.getUser()
        if (error) throw error
        
        if (user) {
            const { data: userData } = await supabase
                .from('usuarios')
                .select('*')
                .eq('id', user.id)
                .single()
            
            return { success: true, user: user, profile: userData }
        }
        
        return { success: true, user: null }
    } catch (error) {
        console.error('‚ùå Erro ao buscar usu√°rio:', error.message)
        return { success: false, error: error.message }
    }
}

// ========================
// 3. FUN√á√ïES DE PRODUTOS SUPABASE
// ========================

async function getProductsSupabase() {
    try {
        console.log('üì¶ Buscando produtos do Supabase...')
        
        const { data, error } = await supabase
            .from('produtos')
            .select('*')
            .eq('ativo', true)
            .order('nome', { ascending: true })
        
        if (error) throw error
        
        console.log(`‚úÖ ${data.length} produtos carregados`)
        return { success: true, products: data }
    } catch (error) {
        console.error('‚ùå Erro ao buscar produtos:', error.message)
        return { success: false, error: error.message, products: [] }
    }
}

// ========================
// 4. FUN√á√ïES DE CARRINHO SUPABASE
// ========================

async function getCartSupabase(userId) {
    try {
        console.log('üõí Buscando carrinho do usu√°rio...')
        
        const { data, error } = await supabase
            .from('carrinho')
            .select(`
                *,
                produtos (*)
            `)
            .eq('usuario_id', userId)
        
        if (error) throw error
        
        console.log(`‚úÖ Carrinho carregado: ${data.length} itens`)
        return { success: true, cart: data }
    } catch (error) {
        console.error('‚ùå Erro ao buscar carrinho:', error.message)
        return { success: false, error: error.message, cart: [] }
    }
}

async function addToCartSupabase(userId, productId, quantity = 1) {
    try {
        console.log('‚ûï Adicionando ao carrinho:', { userId, productId, quantity })
        
        const { data: existingItem } = await supabase
            .from('carrinho')
            .select('*')
            .eq('usuario_id', userId)
            .eq('produto_id', productId)
            .single()
        
        if (existingItem) {
            const { data, error } = await supabase
                .from('carrinho')
                .update({ quantidade: existingItem.quantidade + quantity })
                .eq('id', existingItem.id)
                .select()
            
            if (error) throw error
            return { success: true, item: data[0] }
        } else {
            const { data, error } = await supabase
                .from('carrinho')
                .insert([{
                    usuario_id: userId,
                    produto_id: productId,
                    quantidade: quantity
                }])
                .select()
            
            if (error) throw error
            return { success: true, item: data[0] }
        }
    } catch (error) {
        console.error('‚ùå Erro ao adicionar ao carrinho:', error.message)
        return { success: false, error: error.message }
    }
}

async function updateCartItemSupabase(cartItemId, quantity) {
    try {
        if (quantity <= 0) {
            return await removeFromCartSupabase(cartItemId)
        }
        
        const { data, error } = await supabase
            .from('carrinho')
            .update({ quantidade: quantity })
            .eq('id', cartItemId)
            .select()
        
        if (error) throw error
        return { success: true, item: data[0] }
    } catch (error) {
        console.error('‚ùå Erro ao atualizar carrinho:', error.message)
        return { success: false, error: error.message }
    }
}

async function removeFromCartSupabase(cartItemId) {
    try {
        const { error } = await supabase
            .from('carrinho')
            .delete()
            .eq('id', cartItemId)
        
        if (error) throw error
        return { success: true }
    } catch (error) {
        console.error('‚ùå Erro ao remover do carrinho:', error.message)
        return { success: false, error: error.message }
    }
}

async function clearCartSupabase(userId) {
    try {
        const { error } = await supabase
            .from('carrinho')
            .delete()
            .eq('usuario_id', userId)
        
        if (error) throw error
        console.log('‚úÖ Carrinho limpo')
        return { success: true }
    } catch (error) {
        console.error('‚ùå Erro ao limpar carrinho:', error.message)
        return { success: false, error: error.message }
    }
}

// ========================
// 5. FUN√á√ïES DE PEDIDOS SUPABASE
// ========================

async function createOrderSupabase(userId, items, total) {
    try {
        console.log('üì¶ Criando pedido...')
        
        const { data: orderData, error: orderError } = await supabase
            .from('pedidos')
            .insert([{
                usuario_id: userId,
                total: total,
                status: 'pendente',
                created_at: new Date().toISOString()
            }])
            .select()
        
        if (orderError) throw orderError
        
        const orderId = orderData[0].id
        
        const orderItems = items.map(item => ({
            pedido_id: orderId,
            produto_id: item.produto_id || item.id,
            quantidade: item.quantidade || item.quantity,
            preco_unitario: item.preco || item.price
        }))
        
        const { error: itemsError } = await supabase
            .from('itens_pedido')
            .insert(orderItems)
        
        if (itemsError) throw itemsError
        
        await clearCartSupabase(userId)
        
        console.log('‚úÖ Pedido criado com sucesso! ID:', orderId)
        return { success: true, order: orderData[0] }
    } catch (error) {
        console.error('‚ùå Erro ao criar pedido:', error.message)
        return { success: false, error: error.message }
    }
}

async function getUserOrdersSupabase(userId) {
    try {
        console.log('üì¶ Buscando pedidos do usu√°rio...')
        
        const { data, error } = await supabase
            .from('pedidos')
            .select(`
                *,
                itens_pedido (
                    *,
                    produtos (*)
                )
            `)
            .eq('usuario_id', userId)
            .order('created_at', { ascending: false })
        
        if (error) throw error
        
        console.log(`‚úÖ ${data.length} pedidos encontrados`)
        return { success: true, orders: data }
    } catch (error) {
        console.error('‚ùå Erro ao buscar pedidos:', error.message)
        return { success: false, error: error.message, orders: [] }
    }
}

// ========================
// 6. BANCO DE DADOS LOCAL (PRODUTOS)
// ========================

const PRODUCTS_DATABASE = [
    {
        id: "Milho",
        name: "Milho Premium",
        description: "Milho org√¢nico cultivado de forma sustent√°vel, sem pesticidas, colhido fresquinho",
        price: 24.90,
        category: "Legumes",
        image: "milho.jpeg",
        rating: 4.8,
        reviews: 127,
        inStock: true,
        tags: ["premium", "prote√≠na", "vegano", "sem-gl√∫ten"]
    },
    {
        id: "alface-organica-crespa-002",
        name: "Alface Org√¢nica Crespa Verde",
        description: "Alface crespa fresca cultivada sem pesticidas em estufa climatizada",
        price: 4.50,
        category: "Verduras",
        image: "alface.jpeg",
        rating: 4.6,
        reviews: 89,
        inStock: true,
        tags: ["fresco", "verduras", "hidrop√¥nico", "vitaminas"]
    },
    {
        id: "Tomate",
        name: "Tomate Org√¢nico Fresco",
        description: "Tomates org√¢nicos da variedade italiana cultivados ao ar livre",
        price: 8.90,
        category: "Frutas",
        image: "tomate.jpeg",
        rating: 4.7,
        reviews: 156,
        inStock: true,
        tags: ["italiano", "suculento", "molhos", "antioxidante"]
    },
    {
        id: "Ab√≥bora Org√¢nica Premium",
        name: "Ab√≥bora Org√¢nica Premium",
        description: "Ab√≥boras org√¢nicas selecionadas, cultivadas sem agrot√≥xicos",
        price: 12.90,
        category: "Legumes",
        image: "abobora.jpeg",
        rating: 4.5,
        reviews: 203,
        inStock: true,
        tags: ["tradicional", "fibras", "energ√©tico", "vers√°til"]
    },
    {
        id: "Castanhas Org√¢nicas Premium-005",
        name: "Castanhas Org√¢nicas Premium",
        description: "Castanhas doces e saborosas, colhidas no outono",
        price: 6.90,
        category: "Frutas",
        image: "castanha.jpeg",
        rating: 4.9,
        reviews: 78,
        inStock: true,
        tags: ["ferro", "√°cido-f√≥lico", "antioxidante"]
    },
    {
        id: "Cenoura Premium",
        name: "Cenoura Org√¢nica Nantes Doce",
        description: "Cenouras org√¢nicas da variedade Nantes, doces e crocantes",
        price: 5.90,
        category: "Verduras",
        image: "cenouras.jpeg",
        rating: 4.6,
        reviews: 142,
        inStock: true,
        tags: ["doce", "betacaroteno", "crocante"]
    },
    {
        id: "Uvas Org√¢nicas Premium-007",
        name: "Uvas Org√¢nicas Premium",
        description: "Uvas selecionadas de vinhedos org√¢nicos, doces e suculentas",
        price: 9.90,
        category: "Frutas",
        image: "uva.jpeg",
        rating: 4.4,
        reviews: 167,
        inStock: true,
        tags: ["antioxidantes", "nutritivo"]
    },
    {
        id: "Laranjas Org√¢nicas Premium-008",
        name: "Laranjas Org√¢nicas Premium",
        description: "Laranjas suculentas e doces, cultivadas organicamente",
        price: 5.50,
        category: "Frutas",
        image: "laranja.jpeg",
        rating: 4.7,
        reviews: 92,
        inStock: true,
        tags: ["vitamina-c", "arom√°tica"]
    },
    {
        id: "Br√≥colis Org√¢nico Fresco-009",
        name: "Br√≥colis Org√¢nico Fresco",
        description: "Br√≥colis org√¢nico fresco, rico em vitaminas e minerais",
        price: 7.90,
        category: "Legumes",
        image: "brocolis.jpeg",
        rating: 4.5,
        reviews: 118,
        inStock: true,
        tags: ["baixa-caloria", "vers√°til"]
    },
    {
        id: "Batata Org√¢nicas Premium-010",
        name: "Batata Org√¢nicas Premium",
        description: "Batatas org√¢nicas frescas, cultivadas naturalmente",
        price: 18.90,
        category: "Legumes",
        image: "batata.jpeg",
        rating: 4.8,
        reviews: 189,
        inStock: true,
        tags: ["energia", "vers√°til"]
    },
    {
        id: "Batata Doce Premim-011",
        name: "Batata Doce Org√¢nica Premium",
        description: "Batata doce org√¢nica naturalmente doce, rica em vitaminas",
        price: 4.90,
        category: "Legumes",
        image: "batatadoce.jpeg",
        rating: 4.6,
        reviews: 134,
        inStock: true,
        tags: ["fibras", "c√°lcio", "ferro"]
    },
    {
        id: "Ma√ß√£ Org√¢nica Premium-012",
        name: "Ma√ß√£ Org√¢nica Premium",
        description: "Ma√ß√£s vermelhas selecionadas, cultivadas organicamente",
        price: 6.50,
        category: "Frutas",
        image: "ma√ßa.jpeg",
        rating: 4.4,
        reviews: 108,
        inStock: true,
        tags: ["antioxidantes", "doce"]
    }
];

// ========================
// 7. ESTADO DA APLICA√á√ÉO
// ========================

let cart = [];
let currentFilter = 'all';
let searchQuery = '';
let selectedProduct = null;
let detailQuantity = 1;
let currentUser = null;
let isLoggedIn = false;
let isAdmin = false;
let userOrders = [];

// ========================
// 8. MENSAGENS DO MASCOTE
// ========================

let mascotMessages = [
    "Ol√°! Eu sou o MilhitoüåΩ!",
    "Sou primo do verdeco! Nossas empresas s√£o s√≥cias! ü•¨",
    "NOSSOS PRODUTOS S√ÉO PREMIUM!!!!",
    "E voc√™ ainda pensa em comprar do concorrente üôÑ",
    "Vou ali pegar um regadorüöø",
    "Algumas pessoas me inspiram tanto a nunca ser como elas!",
    "Grandes batalhas s√≥ s√£o dadas a grandes guerreiros",
    "N√£o Deu Valor? Desculpa!"
];

let currentMascotMessage = 0;

// ========================
// 9. FUN√á√ïES DE INICIALIZA√á√ÉO
// ========================

document.addEventListener('DOMContentLoaded', async function() {
    loadProducts();
    updateCartBadge();
    initializeMascot();
    
    // Se Supabase estiver habilitado
    if (USE_SUPABASE) {
        await initSupabase();
    } else {
        // Fallback para localStorage
        const savedCart = localStorage.getItem('outono-dourado-cart');
        if (savedCart) {
            cart = JSON.parse(savedCart);
            updateCartBadge();
        }
        
        const savedUser = localStorage.getItem('outono-dourado-user');
        if (savedUser) {
            currentUser = JSON.parse(savedUser);
            isLoggedIn = true;
            isAdmin = currentUser.isAdmin || false;
            updateAuthUI();
        }
    }
    
    const savedOrders = localStorage.getItem('outono-dourado-orders');
    if (savedOrders) {
        userOrders = JSON.parse(savedOrders);
    }
    
    setTimeout(() => {
        if (isLoggedIn) {
            showToast(`Bem-vindo de volta, ${currentUser.name}!`, 'Que bom ter voc√™ aqui novamente.', 'success');
        } else {
            showToast('Bem-vindo √† Outono Dourado!', 'Descubra nossos produtos org√¢nicos frescos.', 'success');
        }
    }, 1000);
});

// Inicializar Supabase
async function initSupabase() {
    console.log('üöÄ Inicializando integra√ß√£o Supabase...')
    
    try {
        const userResult = await getCurrentUserSupabase()
        
        if (userResult.success && userResult.user) {
            currentUser = {
                id: userResult.user.id,
                email: userResult.user.email,
                name: userResult.profile?.nome || userResult.user.email.split('@')[0],
                phone: userResult.profile?.telefone || '',
                address: userResult.profile?.endereco || '',
                isAdmin: userResult.profile?.is_admin || false
            }
            
            isLoggedIn = true
            isAdmin = currentUser.isAdmin
            updateAuthUI()
            
            console.log('‚úÖ Usu√°rio autenticado:', currentUser.email)
            
            await loadCartFromSupabase()
            await loadOrderHistory()
        }
        
        const productsLoaded = await loadProductsFromSupabase()
        
        if (productsLoaded) {
            loadProducts()
        }
        
        console.log('‚úÖ Integra√ß√£o Supabase inicializada!')
        
    } catch (error) {
        console.error('‚ùå Erro ao inicializar Supabase:', error)
        console.log('‚ÑπÔ∏è Continuando com dados locais...')
    }
}

// Carregar produtos do Supabase
async function loadProductsFromSupabase() {
    console.log('üì¶ Carregando produtos do Supabase...')
    
    try {
        const result = await getProductsSupabase()
        
        if (result.success && result.products.length > 0) {
            PRODUCTS_DATABASE.length = 0
            PRODUCTS_DATABASE.push(...result.products.map(p => ({
                id: p.id,
                name: p.nome,
                description: p.descricao,
                price: parseFloat(p.preco),
                category: p.categoria,
                image: p.imagem_url || 'placeholder.jpg',
                rating: p.rating || 4.5,
                reviews: p.reviews || 0,
                inStock: p.em_estoque !== false,
                tags: p.tags || []
            })))
            
            console.log(`‚úÖ ${PRODUCTS_DATABASE.length} produtos carregados do Supabase`)
            return true
        }
        
        console.log('‚ö†Ô∏è Usando produtos locais')
        return false
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar produtos:', error)
        return false
    }
}

// Carregar carrinho do Supabase
async function loadCartFromSupabase() {
    if (!isLoggedIn || !currentUser) return
    
    console.log('üõí Carregando carrinho do Supabase...')
    
    try {
        const result = await getCartSupabase(currentUser.id)
        
        if (result.success) {
            cart = result.cart.map(item => ({
                id: item.produto_id,
                name: item.produtos.nome,
                price: parseFloat(item.produtos.preco),
                image: item.produtos.imagem_url,
                quantity: item.quantidade,
                cartItemId: item.id
            }))
            
            updateCartBadge()
            console.log(`‚úÖ Carrinho carregado: ${cart.length} itens`)
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar carrinho:', error)
    }
}

// Carregar hist√≥rico de pedidos
async function loadOrderHistory() {
    if (!isLoggedIn) return
    
    console.log('üì¶ Carregando hist√≥rico de pedidos...')
    
    try {
        const result = await getUserOrdersSupabase(currentUser.id)
        
        if (result.success) {
            userOrders = result.orders
            console.log(`‚úÖ ${userOrders.length} pedidos carregados`)
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar pedidos:', error)
    }
}

// ========================
// 10. HANDLERS DE AUTENTICA√á√ÉO
// ========================

window.handleLogin = async function(event) {
    event.preventDefault()
    
    const formData = new FormData(event.target)
    const email = formData.get('email')
    const password = formData.get('password')
    const remember = formData.get('remember')
    
    const submitBtn = event.target.querySelector('button[type="submit"]')
    const originalText = submitBtn.innerHTML
    submitBtn.innerHTML = 'Entrando...'
    submitBtn.disabled = true
    
    try {
        if (USE_SUPABASE) {
            const result = await loginUserSupabase(email, password)
            
            if (result.success) {
                currentUser = {
                    id: result.user.id,
                    email: result.user.email,
                    name: result.profile?.nome || result.user.email.split('@')[0],
                    phone: result.profile?.telefone || '',
                    address: result.profile?.endereco || '',
                    isAdmin: result.profile?.is_admin || false
                }
                
                isLoggedIn = true
                isAdmin = currentUser.isAdmin
                
                if (remember) {
                    localStorage.setItem('outono-dourado-user', JSON.stringify(currentUser))
                }
                
                updateAuthUI()
                closeLoginModal()
                showToast('Login realizado!', `Bem-vindo, ${currentUser.name}!`, 'success')
                
                await loadCartFromSupabase()
            } else {
                throw new Error(result.error)
            }
        }
    } catch (error) {
        showToast('Erro no login', error.message || 'Credenciais inv√°lidas', 'error')
    } finally {
        submitBtn.innerHTML = originalText
        submitBtn.disabled = false
        lucide.createIcons()
    }
}

window.handleRegister = async function(event) {
    event.preventDefault()
    
    const formData = new FormData(event.target)
    const name = formData.get('name')
    const email = formData.get('email')
    const phone = formData.get('phone') || ''
    const password = formData.get('password')
    const confirmPassword = formData.get('confirmPassword')
    
    if (password !== confirmPassword) {
        showToast('Erro', 'As senhas n√£o coincidem', 'error')
        return
    }
    
    if (password.length < 6) {
        showToast('Erro', 'A senha deve ter pelo menos 6 caracteres', 'error')
        return
    }
    
    const submitBtn = event.target.querySelector('button[type="submit"]')
    const originalText = submitBtn.innerHTML
    submitBtn.innerHTML = 'Criando conta...'
    submitBtn.disabled = true
    
    try {
        if (USE_SUPABASE) {
            const result = await registerUserSupabase(email, password, name, phone)
            
            if (result.success) {
                showToast('Conta criada!', 'Verifique seu e-mail para confirmar.', 'success')
                closeRegisterModal()
                setTimeout(() => openLoginModal(), 500)
            } else {
                throw new Error(result.error)
            }
        }
    } catch (error) {
        let errorMessage = 'Erro ao criar conta'
        if (error.message.includes('already registered')) {
            errorMessage = 'Este e-mail j√° est√° cadastrado'
        }
        showToast('Erro no cadastro', errorMessage, 'error')
    } finally {
        submitBtn.innerHTML = originalText
        submitBtn.disabled = false
        lucide.createIcons()
    }
}

window.handleLogout = async function() {
    try {
        if (USE_SUPABASE) {
            await logoutUserSupabase()
        }
        
        currentUser = null
        isLoggedIn = false
        isAdmin = false
        cart = []
        
        localStorage.removeItem('outono-dourado-user')
        localStorage.removeItem('outono-dourado-cart')
        
        updateAuthUI()
        updateCartBadge()
        
        showToast('Logout realizado', 'At√© logo!', 'success')
    } catch (error) {
        console.error('‚ùå Erro no logout:', error)
        showToast('Erro', 'Erro ao fazer logout', 'error')
    }
}

window.logout = window.handleLogout

// ========================
// 11. FUN√á√ïES DO MASCOTE
// ========================

function initializeMascot() {
    setTimeout(() => {
        const mascot = document.getElementById('mascot');
        if (mascot) {
            mascot.style.opacity = '1';
            mascot.style.transform = 'translateY(0)';
        }
    }, 2000);
    
    setInterval(() => {
        const messageDiv = document.getElementById('mascot-message');
        if (messageDiv && (!messageDiv.style.display || messageDiv.style.display === 'none')) {
            showRandomMascotMessage();
        }
    }, 30000);
}

function toggleMascotMessage() {
    const messageDiv = document.getElementById('mascot-message');
    if (messageDiv.style.display === 'none' || !messageDiv.style.display) {
        showRandomMascotMessage();
    } else {
        closeMascotMessage();
    }
}

function showRandomMascotMessage() {
    const messageDiv = document.getElementById('mascot-message');
    const textElement = document.getElementById('mascot-text');
    
    if (textElement && messageDiv) {
        textElement.textContent = mascotMessages[currentMascotMessage];
        currentMascotMessage = (currentMascotMessage + 1) % mascotMessages.length;
        
        messageDiv.style.display = 'block';
        
        setTimeout(() => {
            closeMascotMessage();
        }, 5000);
    }
}

function closeMascotMessage() {
    const messageDiv = document.getElementById('mascot-message');
    if (messageDiv) {
        messageDiv.style.display = 'none';
    }
}

// ========================
// 12. FUN√á√ïES UTILIT√ÅRIAS
// ========================

function showToast(title, message, type = 'info') {
    const toaster = document.getElementById('toaster');
    if (!toaster) return;
    
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.innerHTML = `
        <div style="font-weight: 600; margin-bottom: 4px;">${title}</div>
        <div style="font-size: 14px; color: #6b7280;">${message}</div>
    `;
    
    toaster.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 5000);
}

function scrollToSection(sectionId) {
    const element = document.getElementById(sectionId);
    if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
    }
    closeMobileMenu();
}

function toggleMobileMenu() {
    const mobileNav = document.getElementById('mobile-nav');
    if (mobileNav) {
        mobileNav.classList.toggle('open');
    }
}

function closeMobileMenu() {
    const mobileNav = document.getElementById('mobile-nav');
    if (mobileNav) {
        mobileNav.classList.remove('open');
    }
}

// ========================
// 13. FUN√á√ïES DE PRODUTOS
// ========================

function loadProducts() {
    const grid = document.getElementById('products-grid');
    if (!grid) return;
    
    const filteredProducts = PRODUCTS_DATABASE.filter(product => {
        const matchesFilter = currentFilter === 'all' || 
            product.category.toLowerCase() === currentFilter.toLowerCase();
        const matchesSearch = searchQuery === '' || 
            product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
            product.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
        
        return matchesFilter && matchesSearch;
    });
    
    if (filteredProducts.length === 0) {
        grid.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
                <p style="color: rgba(0, 0, 0, 1); font-size: 1.125rem;">Nenhum produto encontrado</p>
                <button class="btn-primary" onclick="clearFilters()" style="margin-top: 1rem;">
                    Limpar Filtros
                </button>
            </div>
        `;
        return;
    }
    
    grid.innerHTML = filteredProducts.map(product => `
        <div class="product-card fade-in" onclick="openProductDetail('${product.id}')">
            <div class="product-image">
                <img src="${product.image}" alt="${product.name}" loading="lazy">
                <div class="product-badges">
                    <div class="product-badge">
                        <i data-lucide="leaf"></i>
                        Org√¢nico
                    </div>
                </div>
            </div>
            <div class="product-content">
                <div class="product-category">${getCategoryName(product.category)}</div>
                <h3 class="product-name">${product.name}</h3>
                <p class="product-description">${product.description}</p>
                <div class="product-rating">
                    <div class="stars">
                        ${generateStars(product.rating)}
                    </div>
                    <span class="rating-count">(${product.reviews})</span>
                </div>
                <div class="product-footer">
                    <div class="product-price">R$ ${product.price.toFixed(2)}</div>
                    <button class="add-to-cart-btn" onclick="event.stopPropagation(); addToCart('${product.id}')">
                        <i data-lucide="shopping-cart"></i>
                    </button>
                </div>
            </div>
        </div>
    `).join('');
    
    lucide.createIcons();
}

function getCategoryName(category) {
    const categoryNames = {
        'alimentos': 'Alimentos',
        'verduras': 'Verduras',
        'legumes': 'Legumes',
        'frutas': 'Frutas'
    };
    return categoryNames[category.toLowerCase()] || category;
}

function generateStars(rating) {
    let stars = '';
    for (let i = 1; i <= 5; i++) {
        if (i <= rating) {
            stars += '<span class="star">‚òÖ</span>';
        } else {
            stars += '<span class="star" style="color: #d1d5db;">‚òÖ</span>';
        }
    }
    return stars;
}

function filterProducts(category) {
    currentFilter = category;
    
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    event.target.classList.add('active');
    
    loadProducts();
}

function searchProducts() {
    const searchInput = document.getElementById('product-search');
    if (searchInput) {
        searchQuery = searchInput.value;
        loadProducts();
    }
}

function clearFilters() {
    currentFilter = 'all';
    searchQuery = '';
    
    const searchInput = document.getElementById('product-search');
    if (searchInput) {
        searchInput.value = '';
    }
    
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    const firstBtn = document.querySelector('.filter-btn');
    if (firstBtn) {
        firstBtn.classList.add('active');
    }
    
    loadProducts();
}

// ========================
// 14. FUN√á√ïES DO CARRINHO
// ========================

async function addToCart(productId) {
    if (USE_SUPABASE && isLoggedIn) {
        if (!currentUser) {
            showToast('Login necess√°rio', 'Fa√ßa login para adicionar itens ao carrinho', 'error');
            openLoginModal();
            return;
        }
        
        try {
            const result = await addToCartSupabase(currentUser.id, productId, 1);
            
            if (result.success) {
                await loadCartFromSupabase();
                
                const product = PRODUCTS_DATABASE.find(p => p.id === productId);
                if (product) {
                    showToast('Adicionado!', `${product.name} foi adicionado ao carrinho`, 'success');
                }
            }
        } catch (error) {
            console.error('‚ùå Erro ao adicionar ao carrinho:', error);
            showToast('Erro', 'Erro ao adicionar ao carrinho', 'error');
        }
        return;
    }
    
    // Fallback para localStorage
    const product = PRODUCTS_DATABASE.find(p => p.id === productId);
    if (!product) return;
    
    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += 1;
        showToast('Produto Atualizado!', `${product.name} - Quantidade atualizada`, 'success');
    } else {
        cart.push({ ...product, quantity: 1 });
        showToast('Produto Adicionado!', `${product.name} foi adicionado ao carrinho`, 'success');
    }
    
    updateCartBadge();
    saveCartToStorage();
}

function updateCartBadge() {
    const badge = document.getElementById('cart-badge');
    if (badge) {
        const itemCount = cart.reduce((sum, item) => sum + item.quantity, 0);
        badge.textContent = itemCount;
        badge.style.display = itemCount > 0 ? 'flex' : 'none';
    }
}

function saveCartToStorage() {
    localStorage.setItem('outono-dourado-cart', JSON.stringify(cart));
}

function openCart() {
    const modal = document.getElementById('cart-modal');
    if (modal) {
        modal.style.display = 'flex';
        loadCartItems();
    }
}

function closeCart() {
    const modal = document.getElementById('cart-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function loadCartItems() {
    const cartItemsContainer = document.getElementById('cart-items');
    const cartTotal = document.getElementById('cart-total');
    
    if (!cartItemsContainer) return;
    
    if (cart.length === 0) {
        cartItemsContainer.innerHTML = `
            <div class="empty-cart">
                <i data-lucide="shopping-cart"></i>
                <p>Seu carrinho est√° vazio</p>
                <button class="btn-primary" onclick="closeCart()">
                    Continuar Comprando
                </button>
            </div>
        `;
        if (cartTotal) cartTotal.style.display = 'none';
        lucide.createIcons();
        return;
    }
    
    cartItemsContainer.innerHTML = cart.map(item => `
        <div class="cart-item">
            <img src="${item.image}" alt="${item.name}" class="cart-item-image">
            <div class="cart-item-info">
                <div class="cart-item-name">${item.name}</div>
                <div class="cart-item-price">R$ ${item.price.toFixed(2)}</div>
                <div class="cart-item-controls">
                    <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', ${item.quantity - 1})">-</button>
                    <span class="quantity-display">${item.quantity}</span>
                    <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', ${item.quantity + 1})">+</button>
                    <button class="remove-btn" onclick="removeFromCart('${item.id}')">Remover</button>
                </div>
            </div>
        </div>
    `).join('');
    
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const totalAmount = document.getElementById('total-amount');
    if (totalAmount) {
        totalAmount.textContent = `R$ ${total.toFixed(2)}`;
    }
    if (cartTotal) cartTotal.style.display = 'block';
}

async function updateCartQuantity(productId, newQuantity) {
    if (newQuantity < 1) {
        removeFromCart(productId);
        return;
    }
    
    if (USE_SUPABASE && isLoggedIn) {
        const cartItem = cart.find(item => item.id === productId);
        if (cartItem && cartItem.cartItemId) {
            try {
                await updateCartItemSupabase(cartItem.cartItemId, newQuantity);
                await loadCartFromSupabase();
                loadCartItems();
            } catch (error) {
                console.error('‚ùå Erro ao atualizar quantidade:', error);
            }
        }
        return;
    }
    
    const item = cart.find(item => item.id === productId);
    if (item) {
        item.quantity = newQuantity;
        updateCartBadge();
        saveCartToStorage();
        loadCartItems();
    }
}

async function removeFromCart(productId) {
    if (USE_SUPABASE && isLoggedIn) {
        const cartItem = cart.find(item => item.id === productId);
        if (cartItem && cartItem.cartItemId) {
            try {
                await removeFromCartSupabase(cartItem.cartItemId);
                await loadCartFromSupabase();
                showToast('Removido', 'Item removido do carrinho', 'success');
                loadCartItems();
            } catch (error) {
                console.error('‚ùå Erro ao remover do carrinho:', error);
            }
        }
        return;
    }
    
    const item = cart.find(item => item.id === productId);
    if (item) {
        cart = cart.filter(item => item.id !== productId);
        showToast('Produto Removido', `${item.name} foi removido do carrinho`, 'success');
        updateCartBadge();
        saveCartToStorage();
        loadCartItems();
    }
}

async function checkout() {
    if (cart.length === 0) return;
    
    if (!isLoggedIn) {
        showToast('Login necess√°rio', 'Fa√ßa login para finalizar seu pedido', 'error');
        openLoginModal();
        return;
    }
    
    if (USE_SUPABASE) {
        try {
            const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            
            const result = await createOrderSupabase(currentUser.id, cart, total);
            
            if (result.success) {
                showToast('Pedido realizado!', `Pedido criado com sucesso!`, 'success');
                cart = [];
                updateCartBadge();
                closeCart();
            }
        } catch (error) {
            console.error('‚ùå Erro ao finalizar compra:', error);
            showToast('Erro', 'Erro ao finalizar compra', 'error');
        }
        return;
    }
    
    closeCart();
    openCheckoutModal();
}

// ========================
// 15. FUN√á√ïES DE MODAL
// ========================

function openLoginModal() {
    const modal = document.getElementById('login-modal');
    if (modal) {
        closeRegisterModal();
        modal.style.display = 'flex';
    }
}

function closeLoginModal() {
    const modal = document.getElementById('login-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function openRegisterModal() {
    const modal = document.getElementById('register-modal');
    if (modal) {
        closeLoginModal();
        modal.style.display = 'flex';
    }
}

function closeRegisterModal() {
    const modal = document.getElementById('register-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function openProductDetail(productId) {
    selectedProduct = PRODUCTS_DATABASE.find(p => p.id === productId);
    if (!selectedProduct) return;
    
    const modal = document.getElementById('product-detail-modal');
    const title = document.getElementById('product-detail-title');
    const img = document.getElementById('product-detail-img');
    const description = document.getElementById('product-detail-description');
    const price = document.getElementById('product-detail-price-value');
    
    if (modal && title && img && description && price) {
        title.textContent = selectedProduct.name;
        img.src = selectedProduct.image;
        img.alt = selectedProduct.name;
        description.textContent = selectedProduct.description;
        price.textContent = `R$ ${selectedProduct.price.toFixed(2)}`;
        
        detailQuantity = 1;
        const qtyDisplay = document.getElementById('detail-quantity');
        if (qtyDisplay) {
            qtyDisplay.textContent = detailQuantity;
        }
        
        modal.style.display = 'flex';
    }
}

function closeProductDetail() {
    const modal = document.getElementById('product-detail-modal');
    if (modal) {
        modal.style.display = 'none';
        selectedProduct = null;
    }
}

function increaseQuantity() {
    detailQuantity++;
    const qtyDisplay = document.getElementById('detail-quantity');
    if (qtyDisplay) {
        qtyDisplay.textContent = detailQuantity;
    }
}

function decreaseQuantity() {
    if (detailQuantity > 1) {
        detailQuantity--;
        const qtyDisplay = document.getElementById('detail-quantity');
        if (qtyDisplay) {
            qtyDisplay.textContent = detailQuantity;
        }
    }
}

function addToCartFromDetail() {
    if (!selectedProduct) return;
    
    for (let i = 0; i < detailQuantity; i++) {
        addToCart(selectedProduct.id);
    }
    
    closeProductDetail();
}

// ========================
// 16. FUN√á√ïES DE AUTENTICA√á√ÉO UI
// ========================

function updateAuthUI() {
    const authButtons = document.getElementById('auth-buttons');
    const userMenu = document.getElementById('user-menu');
    const userName = document.getElementById('user-name');
    
    if (isLoggedIn && currentUser) {
        if (authButtons) authButtons.style.display = 'none';
        if (userMenu) userMenu.style.display = 'block';
        if (userName) userName.textContent = currentUser.name.split(' ')[0];
    } else {
        if (authButtons) authButtons.style.display = 'block';
        if (userMenu) userMenu.style.display = 'none';
    }
}

function toggleUserDropdown() {
    const dropdown = document.getElementById('user-dropdown');
    if (dropdown) {
        dropdown.classList.toggle('open');
    }
}

function submitContactForm(event) {
    event.preventDefault();
    showToast('Mensagem Enviada!', 'Entraremos em contato em breve.', 'success');
    event.target.reset();
}

// ========================
// 17. FUN√á√ïES GLOBAIS
// ========================

window.scrollToSection = scrollToSection;
window.toggleMobileMenu = toggleMobileMenu;
window.toggleMascotMessage = toggleMascotMessage;
window.closeMascotMessage = closeMascotMessage;
window.filterProducts = filterProducts;
window.searchProducts = searchProducts;
window.addToCart = addToCart;
window.openCart = openCart;
window.closeCart = closeCart;
window.updateCartQuantity = updateCartQuantity;
window.removeFromCart = removeFromCart;
window.checkout = checkout;
window.openLoginModal = openLoginModal;
window.closeLoginModal = closeLoginModal;
window.openRegisterModal = openRegisterModal;
window.closeRegisterModal = closeRegisterModal;
window.openProductDetail = openProductDetail;
window.closeProductDetail = closeProductDetail;
window.increaseQuantity = increaseQuantity;
window.decreaseQuantity = decreaseQuantity;
window.addToCartFromDetail = addToCartFromDetail;
window.toggleUserDropdown = toggleUserDropdown;
window.submitContactForm = submitContactForm;

console.log('‚úÖ Sistema Outono Dourado carregado com sucesso!');
